generator client {
  provider      = "prisma-client"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  quizzes   Quiz[]
}

model Quiz {
  id                  String         @id @default(cuid())
  quizPageTitle       String         @unique
  quizPageDescription String
  difficulty          QuizDifficulty
  title               String
  description         String
  slug                String         @unique
  isPublished         Boolean        @default(false)
  publishedAt         DateTime?
  views               Int            @default(0)
  categoryId          Int?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  questions           Question[]
  category            Category?      @relation(fields: [categoryId], references: [id])
  tags                QuizTag[]

  @@index([difficulty])
  @@index([createdAt])
  @@index([isPublished])
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  quizzes   QuizTag[]
}

model QuizTag {
  quizId String
  tagId  Int
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([quizId, tagId])
}

model Question {
  id           String   @id @default(cuid())
  quizId       String
  text         String
  options      String[]
  correctIndex Int
  explanation  String?
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  quiz         Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

enum QuizDifficulty {
  easy
  medium
  hard
}
