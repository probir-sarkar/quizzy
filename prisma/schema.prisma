generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum QuizDifficulty {
  easy
  medium
  hard
}


model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  quizzes   Quiz[]
  createdAt DateTime @default(now())
}

model Quiz {
  id String @id @default(cuid())

  // SEO / page
  quizPageTitle       String @unique
  quizPageDescription String

  // Meta
  difficulty  QuizDifficulty
  title       String
  description String

  // Extra basics
  slug        String    @unique
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  views       Int       @default(0)

  // Relations
  questions  Question[]
  categoryId Int?
  category   Category?  @relation(fields: [categoryId], references: [id])
  tags       QuizTag[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([difficulty])
  @@index([createdAt])
  @@index([isPublished])
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  quizzes   QuizTag[]
  createdAt DateTime  @default(now())
}

model QuizTag {
  quizId String
  tagId  Int
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([quizId, tagId]) // composite key prevents duplicates
}

model Question {
  id     String @id @default(cuid())
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  text         String
  options      String[] // ["A", "B", "C", "D"]
  correctIndex Int
  explanation  String?
  order        Int          @default(0)

  createdAt DateTime @default(now())
}
